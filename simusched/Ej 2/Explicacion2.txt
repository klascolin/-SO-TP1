Ejercicio2:

Informacion Lote de tareas(Poner en tabla)
Tarea 		tiempoLlegada
TaskCPU 	0
TaskConsola 20
TaskConsola 40

Los tiempos de llegada tienen "sentido con el problema" pero ...?

Primer caso:

Latencia(1 nucleo)(Es el tiempo desde que llega hasta que se pone running ???)
Los valores exactos fueron extraidos desde la ejecucion en consola
Tarea  (+tipo?) 	ciclos
TaskCPU		4 
TaskConsola 108  -20 +1 = 89
TaskConsola 200 - 40 + 1 =  161

Segundo caso:

Latencia(2 nucleo)
Tarea   	ciclos
TaskCPU		4 
TaskConsola 4
TaskConsola 40 108 - 40 + 1 =  69

En este escenario, se puede observar que la duracion del lote de tareas en el caso de un solo nucleo finaliza despues de los 300 ciclos, mientras que con dos, no supera los 230.
Esto se debe a la ganancia en la latencia del segundo caso con respecto al primero. Como se puede ver en el grafico, y en los calculos previos, la tarea 1 llega en el ciclo 20  y solo pasa 4 en estado ready pues luego es "recibida" por el segundo nucleo, que hasta el momento se encontraba ejecutando la tarea IDLE(desde 0 a 20 ciclos, como se puede apreciar)
Esta situacion seria imposible en el caso 1, ya que la tarea 1 debe esperar(por razones de la implementacion FCFS y por la ausencia de un segundo nucleo) a que la tareaCPU(ID = 0) llegue a su fin(como se puede ver al cabo de los 105 cilos).
Notese que hay un ciclo adicional por tarea, siendo este la llamada a la syscall exit().
Por estos hechos, es que ,tambien, la ultima tarea(ID = 2) reduce el tiempo de latencia en el caso 2 ya que ahora a los 105 ciclos, el primer nucleo se libera de la tareaCPU y luego del context switch de 4 ciclos, se comenzara a ejecutar.
Es importante marcar que las tareas que simulan la reproduccion de una cancion y la navegacion, realizan una cantidad de llamadas bloqueantes de duracion entre 2 y 4 ciclos, durante las cuales el flujo de ejecucion queda estatico, es decir es tiempo que el cpu "desperdicia" , a diferencia de Round Robin, donde se cambiaria inmediatamente a otro proceso.

